import pytest
import GRASPy as gp


@pytest.mark.parametrize("p_input, p_output", [
    ("", (-1, -1)),
    ("(A:1,(B:2)C:3)D:4;", (0, 13)),
    ("abc123", (-1, -1))
])
def test_find_p(p_input, p_output):

    assert gp.find_p(p_input) == (p_output), "Should be 0, 13"


@pytest.mark.parametrize("nwk, commas", [
    ("ab:0.3,(E:3.9,F:4.5)cd:0.2", [6]),
    ("(ab:0.3,(E:3.9,F:4.5)cd:0.2);", [])
])
def test_find_comma(nwk, commas):

    assert gp.find_comma(nwk) == commas


@pytest.mark.parametrize("nwk, dfs", [
    # internal node names
    ("((H:1.2,G:1.0)ab:0.3,(E:3.9,F:4.5)cd:2.5):0", {'order': ['0:0', '1:0.3', 'H:1.2', 'G:1.0', '2:2.5', 'E:3.9', 'F:4.5'],
                                                     'count': 2,
                                                     'Parents': {'1:0.3': '0:0',
                                                                 'H:1.2': '1:0.3',
                                                                 'G:1.0': '1:0.3',
                                                                 '2:2.5': '0:0',
                                                                 'E:3.9': '2:2.5',
                                                                 'F:4.5': '2:2.5'}}),
    # no internal node names
    ("((H:1.2,G:1.0):0.3,(E:3.9,F:4.5):2.5):0", {'order': ['0:0', '1:0.3', 'H:1.2', 'G:1.0', '2:2.5', 'E:3.9', 'F:4.5'],
                                                 'count': 2,
                                                 'Parents': {'1:0.3': '0:0',
                                                             'H:1.2': '1:0.3',
                                                             'G:1.0': '1:0.3',
                                                             '2:2.5': '0:0',
                                                             'E:3.9': '2:2.5',
                                                             'F:4.5': '2:2.5'}}),

    # root node labelled
    ("((H:1.2,G:1.0)ab:0.3,(E:3.9,F:4.5)cd:2.5)N0:0", {'order': ['0:0', '1:0.3', 'H:1.2', 'G:1.0', '2:2.5', 'E:3.9', 'F:4.5'],
                                                       'count': 2,
                                                       'Parents': {'1:0.3': '0:0',
                                                                   'H:1.2': '1:0.3',
                                                                   'G:1.0': '1:0.3',
                                                                   '2:2.5': '0:0',
                                                                   'E:3.9': '2:2.5',
                                                                   'F:4.5': '2:2.5'}})
])
def test_nwk_split(nwk, dfs):

    assert gp.nwk_split(nwk) == dfs


@pytest.mark.parametrize("nwk_input, idx_output", [
    # root with no dist
    ("((A:0.6,((B:3.3,(C:1.0,D:2.5)cd:1.8)bcd:5,((E:3.9,F:4.5)ef:2.5,G:0.3)efg:7)X:3.2)Y:0.5,H:1.1)I;",
     {'Parents': [-1, 0, 1, 1, 3, 4, 4, 6, 6, 3, 9, 10, 10, 9, 0], 'Labels': ['0', '1', 'A', '2', '3', 'B', '4', 'C', 'D', '5', '6', 'E', 'F', 'G', 'H'], 'Distances': [0.0, 0.5, 0.6, 3.2, 5.0, 3.3, 1.8, 1.0, 2.5, 7.0, 2.5, 3.9, 4.5, 0.3, 1.1], 'Branchpoints': 15}),

    #root and dist
    ("((A:0.6,((B:3.3,(C:1.0,D:2.5)cd:1.8)bcd:5,((E:3.9,F:4.5)ef:2.5,G:0.3)efg:7)X:3.2)Y:0.5,H:1.1)I:0.2;",
     {'Parents': [-1, 0, 1, 1, 3, 4, 4, 6, 6, 3, 9, 10, 10, 9, 0], 'Labels': ['0', '1', 'A', '2', '3', 'B', '4', 'C', 'D', '5', '6', 'E', 'F', 'G', 'H'], 'Distances': [0.0, 0.5, 0.6, 3.2, 5.0, 3.3, 1.8, 1.0, 2.5, 7.0, 2.5, 3.9, 4.5, 0.3, 1.1], 'Branchpoints': 15}),

    # no root label or dist
    ("((A:0.6,((B:3.3,(C:1.0,D:2.5)cd:1.8)bcd:5,((E:3.9,F:4.5)ef:2.5,G:0.3)efg:7)X:3.2)Y:0.5,H:1.1);",
     {'Parents': [-1, 0, 1, 1, 3, 4, 4, 6, 6, 3, 9, 10, 10, 9, 0], 'Labels': ['0', '1', 'A', '2', '3', 'B', '4', 'C', 'D', '5', '6', 'E', 'F', 'G', 'H'], 'Distances': [0.0, 0.5, 0.6, 3.2, 5.0, 3.3, 1.8, 1.0, 2.5, 7.0, 2.5, 3.9, 4.5, 0.3, 1.1], 'Branchpoints': 15}),

    # no internal node names
    ("(((XP_006629927.2:0.14777721590070114,(XP_018611667.1:0.31741219299255685,((XP_007229530.1:0.20410994427385432,(XP_012687241.1:0.12553661262814741,XP_018919739.1:0.17752015624894124):0.02108546966591862):0.024498458258308764,(XP_019717376.1:0.3374131974537633,(XP_010886716.1:0.17046994270732152,(XP_014050304.1:0.012222797694125376,XP_021429054.1:0.016443894223391986):0.051214958442506786):0.06898824252200719):0.07186524457989396):0.10310490468352707):0.06898460428141462):0.11632291055872579,(ARO89866.1:0.25205280271933694,(XP_014733783.1:0.29681349725859363,(XP_005082857.1:0.1589210754372825,((XP_021540185.1:0.03325108724429082,XP_019684690.2:0.018088332404641694):0.04823406553019316,(XP_012621711.1:0.05681896074666115,((NP_898898.1:1.0000005001842283E-6,XP_526649.2:0.00220424589188406):0.005288422325157249,(XP_012291909.1:0.0046099502113805535,XP_003929520.1:0.004241068270090409):0.010508512073819531):0.040465306764365216):0.031854968122094096):0.030935504331779384):0.18757970335837193):0.08013548717836616):0.11264351323303923):0.7819801484223995,((XP_004050792.2:0.046745089073882085,XP_005216113.1:0.031339011068860056):0.22157549651088937,(XP_018963554.1:0.019918423012584174,XP_016357833.1:0.026700451827796012):0.2239611736832119):0.7819801484223997);",
     {"Parents": [-1, 0, 1, 2, 2, 4, 4, 6, 7, 7, 9, 9, 6, 12, 12, 14, 14, 16, 16, 1, 19, 19, 21, 21, 23, 23, 25, 26, 26, 25, 29, 29, 31, 32, 32, 31, 35, 35, 0, 38, 39, 39, 38, 42, 42], "Labels":["0", "1", "2", "XP_006629927.2", "3", "XP_018611667.1", "4", "5", "XP_007229530.1", "6", "XP_012687241.1", "XP_018919739.1", "7", "XP_019717376.1", "8", "XP_010886716.1", "9", "XP_014050304.1", "XP_021429054.1", "10", "ARO89866.1", "11", "XP_014733783.1", "12", "XP_005082857.1", "13", "14", "XP_021540185.1", "XP_019684690.2", "15", "XP_012621711.1", "16", "17", "NP_898898.1", "XP_526649.2", "18", "XP_012291909.1", "XP_003929520.1", "19", "20", "XP_004050792.2", "XP_005216113.1", "21", "XP_018963554.1", "XP_016357833.1"], "Distances":[0, 0.7819801484223995, 0.11632291055872579, 0.14777721590070114, 0.06898460428141462, 0.31741219299255685, 0.10310490468352707, 0.024498458258308764, 0.20410994427385432, 0.02108546966591862, 0.12553661262814741, 0.17752015624894124, 0.07186524457989396, 0.3374131974537633, 0.06898824252200719, 0.17046994270732152, 0.051214958442506786, 0.012222797694125376, 0.016443894223391986, 0.11264351323303923, 0.25205280271933694, 0.08013548717836616, 0.29681349725859363, 0.18757970335837193, 0.1589210754372825, 0.030935504331779384, 0.04823406553019316, 0.03325108724429082, 0.018088332404641694, 0.031854968122094096, 0.05681896074666115, 0.040465306764365216, 0.005288422325157249, 1.0000005001842283E-6, 0.00220424589188406, 0.010508512073819531, 0.0046099502113805535, 0.004241068270090409, 0.7819801484223997, 0.22157549651088937, 0.046745089073882085, 0.031339011068860056, 0.2239611736832119, 0.019918423012584174, 0.026700451827796012], "Branchpoints":45})
])
def test_nwkToJSON(nwk_input, idx_output):

    assert gp.nwkToJSON(nwk_input) == idx_output


@pytest.mark.parametrize("json_tree, idx_tree", [
    ({'Parents': [-1, 0, 1, 1, 0, 4, 4], 'Labels': ['0', '1', 'H', 'G', '2', 'E', 'F'],
      'Distances': [0.0, 0.3, 1.2, 1.0, 2.5, 3.9, 4.5], 'Branchpoints': 7}, (7,
                                                                             ['N0', 'N1', 'H', 'G',
                                                                              'N2', 'E', 'F'],
                                                                             [-1, 0, 1, 1,
                                                                              0, 4, 4],
                                                                             [[1, 4], [2, 3], [None], [None], [
                                                                                 5, 6], [None], [None]],
                                                                             {'N0': 0, 'N1': 1, 'H': 2, 'G': 3,
                                                                                 'N2': 4, 'E': 5, 'F': 6},
                                                                             [0.0, 0.3, 1.2, 1.0, 2.5, 3.9, 4.5])

     )

])
def test_TreeFromJSON(json_tree, idx_tree):

    tree = gp.TreeFromJSON(json_tree)

    assert (tree['nBranches'], list(tree["branchpoints"]), tree["parents"],
            tree["children"], tree["indices"], tree["distances"]) == idx_tree
